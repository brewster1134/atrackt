// Generated by CoffeeScript 1.12.7

/*
Atrackt Tracking Library
https://github.com/brewster1134/atrackt
@version 1.0.0
@author Ryan Brewster
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (function(factory) {
    if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
      return define(['jquery', 'atrackt', 'jquery.scrollTo'], function($, Atrackt) {
        return factory($, Atrackt.constructor);
      });
    } else {
      return factory(window.jQuery, window.Atrackt.constructor);
    }
  })(function($, Atrackt) {
    var AtracktConsole;
    AtracktConsole = (function(superClass) {
      extend(AtracktConsole, superClass);

      function AtracktConsole() {
        var consoleHtml;
        consoleHtml = "<div id=\"atrackt-console\">\n  <h4>Location: <span id=\"atrackt-location\"></span></h4>\n  <table>\n    <thead>\n      <tr>\n        <th>Plugin</th>\n        <th>Event</th>\n        <th>Categories</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n<div>";
        this.$console = $(consoleHtml);
        $('#atrackt-location', this.$console).text(this._getLocation());
        $('body').addClass('atrackt-console').prepend(this.$console);
        this._setPlugins();
        this._renderConsoleElements();
      }

      AtracktConsole.prototype.setPlugin = function(pluginName, plugin) {
        AtracktConsole.__super__.setPlugin.call(this, pluginName, plugin);
        if (plugin) {
          plugin._send = plugin.send;
          return plugin.send = function(data, options) {
            return console.log(plugin.name, data, options);
          };
        }
      };

      AtracktConsole.prototype._setPlugins = function() {
        var plugin, pluginName, ref, results;
        ref = this.plugins;
        results = [];
        for (pluginName in ref) {
          plugin = ref[pluginName];
          if (!plugin._send) {
            results.push(this.setPlugin(pluginName, plugin));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      AtracktConsole.prototype._renderConsoleElements = function() {
        var element, elements, eventType, i, len, plugin, pluginName, ref, ref1, results;
        $('tbody', this.$console).empty();
        ref = this._elements;
        for (eventType in ref) {
          elements = ref[eventType];
          for (i = 0, len = elements.length; i < len; i++) {
            element = elements[i];
            this._renderConsoleElement('ALL', element, eventType);
          }
        }
        ref1 = this.plugins;
        results = [];
        for (pluginName in ref1) {
          plugin = ref1[pluginName];
          results.push((function() {
            var ref2, results1;
            ref2 = plugin._elements;
            results1 = [];
            for (eventType in ref2) {
              elements = ref2[eventType];
              results1.push((function() {
                var j, len1, results2;
                results2 = [];
                for (j = 0, len1 = elements.length; j < len1; j++) {
                  element = elements[j];
                  results2.push(this._renderConsoleElement(pluginName, element, eventType));
                }
                return results2;
              }).call(this));
            }
            return results1;
          }).call(this));
        }
        return results;
      };

      AtracktConsole.prototype._registerElement = function(context, element, event) {
        var contextName;
        AtracktConsole.__super__._registerElement.call(this, context, element, event);
        contextName = context.name ? context.name : 'ALL';
        return this._renderConsoleElement(contextName, element, event);
      };

      AtracktConsole.prototype._renderConsoleElement = function(contextName, element, eventType) {
        var $rowEl, $trackEl, elementValueId, self, trackObject;
        self = this;
        trackObject = this._getTrackObject(element, eventType);
        elementValueId = trackObject._categories.slice(0);
        elementValueId.unshift(trackObject._value);
        elementValueId.unshift(eventType);
        elementValueId = elementValueId.join('-').toLowerCase().replace(/[^a-z]/g, '');
        $rowEl = $("<tr><td>" + contextName + "</td><td>" + eventType + "</td><td>" + trackObject._categories + "</td><td>" + trackObject._value + "</td></tr>");
        $trackEl = $(element);
        if ($("tr#" + elementValueId, this.$console).length) {
          $("tr#" + elementValueId, this.$console).addClass('error');
          $rowEl.addClass('error');
        }
        $('tbody', this.$console).append($rowEl);
        $rowEl.attr('id', elementValueId);
        $trackEl.attr('data-atrackt-id', elementValueId);
        return $rowEl.add($trackEl).hover(function() {
          $rowEl.addClass('atrackt-console-active');
          $trackEl.addClass('atrackt-console-active');
          if ($.scrollTo) {
            if (this === $rowEl[0]) {
              return $.scrollTo($trackEl, 0, {
                offset: {
                  top: -300
                }
              });
            } else if (this === $trackEl[0]) {
              return self.$console.scrollTo($rowEl, 0, {
                offset: {
                  top: -100
                }
              });
            }
          }
        }, function() {
          $rowEl.removeClass('atrackt-console-active');
          return $trackEl.removeClass('atrackt-console-active');
        });
      };

      return AtracktConsole;

    })(Atrackt);
    if (location.href.indexOf('atracktConsole') > -1) {
      return window.Atrackt = new AtracktConsole;
    }
  });

}).call(this);
